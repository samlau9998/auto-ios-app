name: ci-auto-fix

on:
  pull_request:
  workflow_dispatch:

jobs:
  test-and-fix:
    runs-on: macos-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      # 1) 揀用的 Xcode 版本（如 runner 有 Xcode_16.4 更穩定）
      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app
        # 若你的 runner 有 16.4：/Applications/Xcode_16.4.app

      # 2) 用 XcodeGen 由 project.yml 產生 .xcodeproj（避免手寫 pbxproj 壞檔）
      - name: Install XcodeGen & generate project
        run: |
          brew install xcodegen
          xcodegen generate

      # 3) 找/建 + 開機 一部可用的 iPhone 模擬器，並把 UDID 輸出成環境變數
      - name: Pick & boot an available iPhone simulator
        id: sim
        shell: bash
        run: |
          set -euo pipefail

          # 先嘗試找現成可用的 simulator
          UDID="$(xcrun simctl list devices available --json | /usr/bin/python3 - <<'PY'
import sys, json
d=json.load(sys.stdin)
devs=[dev for arr in d.get("devices",{}).values() for dev in arr if dev.get("isAvailable")]
print(devs[0]["udid"] if devs else "")
PY
)"
          if [[ -z "${UDID}" ]]; then
            echo "No available simulator. Creating one…"

            # 找到當前 Xcode 的最新 iOS runtime
            RUNTIME="$(xcrun simctl list runtimes --json | /usr/bin/python3 - <<'PY'
import sys, json
rts=json.load(sys.stdin).get("runtimes",[])
ios=[r for r in rts if r.get("platform")=="iOS" and r.get("isAvailable", True)]
ios=sorted(ios, key=lambda x: x.get("version","0"), reverse=True)
print(ios[0]["identifier"] if ios else "")
PY
)"
            if [[ -z "${RUNTIME}" ]]; then
              echo "❌ No available iOS runtime in the selected Xcode."
              exit 1
            fi

            # 選一個常見 iPhone device type
            DEVICETYPE="$(xcrun simctl list devicetypes | grep -E "iPhone (15|14|13|SE)" | head -n1 | sed -E 's/.*\((.*)\).*/\1/')"
            if [[ -z "${DEVICETYPE}" ]]; then
              DEVICETYPE="$(xcrun simctl list devicetypes | grep -E "iPhone" | head -n1 | sed -E 's/.*\((.*)\).*/\1/')"
            fi

            # 建立裝置
            UDID="$(xcrun simctl create "CI-iPhone" "${DEVICETYPE}" "${RUNTIME}")"
          fi

          # 開機 + 等待 boot 完成
          xcrun simctl boot "${UDID}" || true
          xcrun simctl bootstatus "${UDID}" -b

          echo "SIMULATOR_UDID=${UDID}" | tee -a "$GITHUB_ENV"

      # 4) 自動化：build/test → 失敗就最小修補 → 重測（最多 3 回合）
      - name: Auto loop: build/test -> fix -> retest (max 3 rounds)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -e
          rounds=0
          max=3
          pass=1

          while [ $rounds -lt $max ]; do
            echo "=== Round $((rounds+1))/$max: make test ==="
            # 用 SIMULATOR_UDID 給 Makefile 的 DEST（已在 Makefile 支援）
            make test DEST="platform=iOS Simulator,id=${SIMULATOR_UDID}" | tee test_output.txt
            code=$?
            set -e
            if [ $code -eq 0 ]; then
              echo "✅ Tests passed."
              pass=0
              break
            fi

            echo "❌ Tests failed. Ask LLM to produce minimal fixes..."
            python3 .github/scripts/fix_tests.py

            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "chore: auto-fix from LLM (round $((rounds+1)))" || true
            git push || true

            rounds=$((rounds+1))
          done

          exit $pass
